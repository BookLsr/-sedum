{
  "_args": [
    [
      {
        "raw": "prism-react-renderer@^0.1.6",
        "scope": null,
        "escapedName": "prism-react-renderer",
        "name": "prism-react-renderer",
        "rawSpec": "^0.1.6",
        "spec": ">=0.1.6 <0.2.0",
        "type": "range"
      },
      "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client"
    ]
  ],
  "_cnpm_publish_time": 1561656832106,
  "_from": "prism-react-renderer@^0.1.6",
  "_hasShrinkwrap": false,
  "_id": "prism-react-renderer@0.1.7",
  "_location": "/prism-react-renderer",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/prism-react-renderer_0.1.7_1561656831964_0.9812937772095756"
  },
  "_npmUser": {
    "name": "philpl",
    "email": "phil@kitten.sh"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "prism-react-renderer@^0.1.6",
    "scope": null,
    "escapedName": "prism-react-renderer",
    "name": "prism-react-renderer",
    "rawSpec": "^0.1.6",
    "spec": ">=0.1.6 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npm.souche-inc.com/prism-react-renderer/download/prism-react-renderer-0.1.7.tgz",
  "_shasum": "dc273d0cb6e4a498ba0775094e9a8b01a3ad2eaa",
  "_shrinkwrap": null,
  "_spec": "prism-react-renderer@^0.1.6",
  "_where": "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client",
  "bugs": {
    "url": "https://github.com/FormidableLabs/prism-react-renderer/issues"
  },
  "dependencies": {},
  "description": "Renders highlighted Prism output using React",
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.3.4",
    "@babel/plugin-proposal-class-properties": "^7.3.4",
    "@babel/preset-env": "^7.3.4",
    "@babel/preset-flow": "^7.0.0",
    "@babel/preset-react": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-jest": "^24.1.0",
    "babel-plugin-macros": "^2.5.0",
    "codegen.macro": "^3.0.0",
    "cross-env": "^5.2.0",
    "flow-bin": "^0.93.0",
    "husky": "^1.3.1",
    "jest": "^24.1.0",
    "lint-staged": "^8.1.4",
    "npm-run-all": "^4.1.5",
    "prettier": "^1.16.4",
    "prismjs": "^1.16.0",
    "react": "^16.8.3",
    "react-dom": "^16.8.3",
    "react-testing-library": "^6.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "dc273d0cb6e4a498ba0775094e9a8b01a3ad2eaa",
    "size": 66089,
    "noattachment": false,
    "tarball": "http://registry.npm.souche-inc.com/prism-react-renderer/download/prism-react-renderer-0.1.7.tgz"
  },
  "files": [
    "index.d.ts",
    "es",
    "lib",
    "prism",
    "themes"
  ],
  "homepage": "https://github.com/FormidableLabs/prism-react-renderer#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "license": "MIT",
  "licenseText": "MIT License\n\nCopyright (c) 2018 Formidable\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "lint-staged": {
    "linters": {
      "*.ts": [
        "prettier --write",
        "git add"
      ],
      "{src,themes}/**/*.js": [
        "jest --bail --findRelatedTests",
        "flow focus-check",
        "prettier --write",
        "git add"
      ]
    }
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "philpl",
      "email": "phil@kitten.sh"
    }
  ],
  "module": "es/index.js",
  "name": "prism-react-renderer",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.14.9"
  },
  "publish_time": 1561656832106,
  "readme": "[![Maintenance Status][maintenance-image]](#maintenance-status)\r\n\r\n\r\n<h1 align=\"center\">\r\n  prism-react-renderer üñåÔ∏è\r\n  <br>\r\n</h1>\r\n<p align=\"center\" style=\"font-size: 1.2rem;\">\r\n  A lean <a href=\"https://github.com/PrismJS/prism\">Prism</a> highlighter component for React<br>\r\n  Comes with everything to render Prismjs highlighted code directly to React (Native) elements, global-pollution-free!\r\n</p>\r\n\r\n## Why?\r\n\r\nMaybe you need to render some extra UI with your Prismjs-highlighted code,\r\nor maybe you'd like to manipulate what Prism renders completely,\r\nor maybe you're just using Prism with React and are searching for an easier,\r\nglobal-pollution-free way?\r\n\r\nThen you're right where you want to be!\r\n\r\n## How?\r\n\r\nThis library tokenises code using Prism and provides a small render-props-driven\r\ncomponent to quickly render it out into React. This is why it even works with\r\nReact Native! It's bundled with a modified version of Prism that won't pollute\r\nthe global namespace and comes with\r\n[a couple of common language syntaxes](./src/vendor/prism/includeLangs.js).\r\n\r\n_(There's also an [escape-hatch](https://github.com/FormidableLabs/prism-react-renderer#prism) to use your own Prism setup, just in case)_\r\n\r\nIt also comes with its own [VSCode-like theming format](#theming), which means by default\r\nyou can easily drop in different themes, use the ones this library ships with, or\r\ncreate new ones programmatically on the fly.\r\n\r\n_(If you just want to use your Prism CSS-file themes, that's also no problem)_\r\n\r\n## Table of Contents\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Basic Props](#basic-props)\r\n  - [children](#children)\r\n  - [language](#language)\r\n  - [code](#code)\r\n- [Advanced Props](#advanced-props)\r\n  - [theme](#theme)\r\n  - [Prism](#prism)\r\n- [Children Function](#children-function)\r\n  - [state](#state)\r\n  - [prop getters](#prop-getters)\r\n    - [`getLineProps`](#getlineprops)\r\n    - [`getTokenProps`](#gettokenprops)\r\n- [Theming](#theming)\r\n- [FAQ](#faq)\r\n- [LICENSE](#license)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n## Installation\r\n\r\nThis module is distributed via npm which is bundled with node and\r\nshould be installed as one of your project's `dependencies`:\r\n\r\n```sh\r\n# npm\r\nnpm install --save prism-react-renderer\r\n# yarn\r\nyarn add prism-react-renderer\r\n```\r\n\r\n> This package also depends on `react`. Please make sure you\r\n> have those installed as well.\r\n\r\n## Usage\r\n\r\n> [Try it out in the browser](https://codesandbox.io/s/00o4wx0jqv)\r\n\r\n```jsx\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\n\r\nconst exampleCode = `\r\n(function someDemo() {\r\n  var test = \"Hello World!\";\r\n  console.log(test);\r\n})();\r\n\r\nreturn () => <App />;\r\n`;\r\n\r\nrender((\r\n  <Highlight {...defaultProps} code={exampleCode} language=\"jsx\">\r\n    {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n      <pre className={className} style={style}>\r\n        {tokens.map((line, i) => (\r\n          <div {...getLineProps({ line, key: i })}>\r\n            {line.map((token, key) => (\r\n              <span {...getTokenProps({ token, key })} />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </pre>\r\n    )}\r\n  </Highlight>,\r\n  document.getElementById('root')\r\n);\r\n```\r\n\r\n`<Highlight />` is the only component exposed by this package, as inspired by\r\n[downshift](https://github.com/paypal/downshift).\r\n\r\nIt also exports a `defaultProps` object which for basic usage can simply be spread\r\nonto the `<Highlight />` component. It also provides some default theming.\r\n\r\nIt doesn't render anything itself, it just calls the render function and renders that.\r\n[\"Use a render prop!\"](https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce)!\r\n`<Highlight>{highlight => <pre>/* your JSX here! */</pre>}</Highlight>`\r\n\r\n## Basic Props\r\n\r\nThis is the list of props that you should probably know about. There are some\r\n[advanced props](#advanced-props) below as well.\r\n\r\nMost of these [advanced props](#advanced-props) are included in the `defaultProps`.\r\n\r\n### children\r\n\r\n> `function({})` | _required_\r\n\r\nThis is called with an object. Read more about the properties of this object in\r\nthe section \"[Children Function](#children-function)\".\r\n\r\n### language\r\n\r\n> `string` | _required_\r\n\r\nThis is the language that your code will be highlighted as. You can see a list\r\nof all languages that are supported out of the box [here](./src/vendor/prism/includeLangs.js).\r\n\r\n### code\r\n\r\n> `string` | _required_\r\n\r\nThis is the code that will be highlighted.\r\n\r\n## Advanced Props\r\n\r\n### theme\r\n\r\n> `PrismTheme` | _required; default is provided in `defaultProps` export_\r\n\r\nIf a theme is passed, it is used to generate style props which can be retrieved\r\nvia the prop-getters which are described in \"[Children Function](#children-function)\".\r\n\r\nA default theme is provided by the `defaultProps` object.\r\n\r\nRead more about how to theme `react-prism-renderer` in\r\nthe section \"[Theming](#theming)\".\r\n\r\n### Prism\r\n\r\n> `PrismLib` | _required; default is provided in `defaultProps` export_\r\n\r\nThis is the [Prismjs](https://github.com/PrismJS/prism) library itself.\r\nA vendored version of Prism is provided (and also exported) as part of this library.\r\nThis vendored version doesn't pollute the global namespace, is slimmed down,\r\nand doesn't conflict with any installation of `prismjs` you might have.\r\n\r\nIf you're only using `Prism.highlight` you can choose to use `prism-react-renderer`'s\r\nexported, vendored version of Prism instead.\r\n\r\nBut if you choose to use your own Prism setup, simply pass Prism as a prop:\r\n\r\n```jsx\r\n// Whichever way you're retrieving Prism here:\r\nimport Prism from 'prismjs/components/prism-core';\r\n\r\n<Highlight Prism={Prism} {/* ... */} />\r\n```\r\n\r\n## Children Function\r\n\r\nThis is where you render whatever you want to based on the output of `<Highlight />`.\r\nYou use it like so:\r\n\r\n```js\r\nconst ui = (\r\n  <Highlight>\r\n    {highlight => (\r\n      // use utilities and prop getters here, like highlight.className, highlight.getTokenProps, etc.\r\n      <pre>{/* more jsx here */}</pre>\r\n    )}\r\n  </Highlight>\r\n);\r\n```\r\n\r\nThe properties of this `highlight` object can be split into two categories as indicated below:\r\n\r\n### state\r\n\r\nThese properties are the flat output of `<Highlight />`. They're generally \"state\" and are what\r\nyou'd usually expect from a render-props-based API.\r\n\r\n| property    | type        | description                                                                                                                  |\r\n| ----------- | ----------- | ---------------------------------------------------------------------------------------------------------------------------- |\r\n| `tokens`    | `Token[][]` | This is a doubly nested array of tokens. The outer array is for separate lines, the inner for tokens, so the actual content. |\r\n| `className` | `string`    | This is the class you should apply to your wrapping element, typically a `<pre>`                                             |\r\n\r\nA \"Token\" is an object that represents a piece of content for Prism. It has a `types` property, which is an array\r\nof types that indicate the purpose and styling of a piece of text, and a `content` property, which is the actual\r\ntext.\r\n\r\nYou'd typically iterate over `tokens`, rendering each line, and iterate over its items, rendering out each token, which is a piece of\r\nthis line.\r\n\r\n### prop getters\r\n\r\n> See\r\n> [Kent C. Dodds' blog post about prop getters](https://blog.kentcdodds.com/how-to-give-rendering-control-to-users-with-prop-getters-549eaef76acf)\r\n\r\nThese functions are used to apply props to the elements that you render. This\r\ngives you maximum flexibility to render what, when, and wherever you like.\r\n\r\nYou'd typically call these functions with some dictated input and add on all other\r\nprops that it should pass through. It'll correctly override and modify the props\r\nthat it returns to you, so passing props to it instead of adding them directly is\r\nadvisable.\r\n\r\n| property        | type           | description                                                                                           |\r\n| --------------- | -------------- | ----------------------------------------------------------------------------------------------------- |\r\n| `getLineProps`  | `function({})` | returns the props you should apply to any list of tokens, i.e. the element that contains your tokens. |\r\n| `getTokenProps` | `function({})` | returns the props you should apply to the elements displaying tokens that you render.                 |\r\n\r\n#### `getLineProps`\r\n\r\nYou need to add a `line` property (type: `Token[]`) to the object you're passing to\r\n`getLineProps`; It's also advisable to add a `key`.\r\n\r\nThis getter will return you props to spread onto your line elements (typically `<div>s`).\r\n\r\nIt will typically return a `className` (if you pass one it'll be appended), `children`,\r\n`style` (if you pass one it'll be merged). It also passes on all other props you pass\r\nto the input.\r\n\r\nThe `className` will always contain `.token-line`.\r\n\r\n#### `getTokenProps`\r\n\r\nYou need to add a `token` property (type: `Token`) to the object you're passing to\r\n`getTokenProps`; It's also advisable to add a `key`.\r\n\r\nThis getter will return you props to spread onto your token elements (typically `<span>s`).\r\n\r\nIt will typically return a `className` (if you pass one it'll be appended), `children`,\r\n`style` (if you pass one it'll be merged). It also passes on all other props you pass\r\nto the input.\r\n\r\nThe `className` will always contain `.token`. This also provides full compatibility with\r\nyour old Prism CSS-file themes.\r\n\r\n## Theming\r\n\r\nThe `defaultProps` you'd typically apply in a basic use-case, contain a default theme.\r\nThis theme is [duotoneDark](./themes/duotoneDark.js).\r\n\r\nWhile all `className`s are provided with `<Highlight />`, so that you could use your good\r\nold Prism CSS-file themes, you can also choose to use `react-prism-renderer`'s themes.\r\n\r\nThese themes are JSON-based and are heavily inspired by VSCode's theme format.\r\n\r\nTheir syntax, expressed in Flow looks like the following:\r\n\r\n```js\r\n{\r\n  plain: StyleObj,\r\n  styles: Array<{\r\n    types: string[],\r\n    languages?: string[],\r\n    style: StyleObj\r\n  }>\r\n}\r\n```\r\n\r\nThe `plain` property provides a base style-object. This style object is directly used\r\nin the `style` props that you'll receive from the prop getters, if a `theme` prop has\r\nbeen passed to `<Highlight />`.\r\n\r\nThe `styles` property contains an array of definitions. Each definition contains a `style`\r\nproperty, that is also just a style object. These styles are limited by the `types`\r\nand `languages` properties.\r\n\r\nThe `types` properties is an array of token types that Prism outputs. The `languages`\r\nproperty limits styles to highlighted languages.\r\n\r\nWhen converting a Prism CSS theme it's mostly just necessary to use classes as\r\n`types` and convert the declarations to object-style-syntax and put them on `style`.\r\n\r\n## FAQ\r\n\r\n<details>\r\n\r\n<summary>How do I use my old Prism css themes?</summary>\r\n\r\n`prism-react-renderer` still returns you all proper `className`s via the prop getters,\r\nwhen you use it. By default however it uses its new theming system, which output a\r\ncouple of `style` props as well.\r\n\r\nIf you don't pass `theme` to the `<Highlight />` component it will default to not\r\noutputting any `style` props, while still returning you the `className` props, like\r\nso:\r\n\r\n```js\r\n<Highlight\r\n  {...defaultProps}\r\n  code={exampleCode}\r\n  language=\"jsx\"\r\n  theme={undefined}\r\n>\r\n  {highlight => null /* ... */}\r\n</Highlight>\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>How do I prevent a theme and the vendored Prism to be bundled?</summary>\r\n\r\nSince the default theme and the vendored Prism library in `prism-react-renderer`\r\ncome from `defaultProps`, if you wish to pass your own Prism library in, and not\r\nuse the built-in theming, you simply need to leave it out to allow your bundler\r\nto tree-shake those:\r\n\r\n```js\r\nimport Highlight from \"prism-react-renderer\";\r\nimport Prism from \"prismjs\"; // Different source\r\n\r\n<Highlight Prism={Prism} code={exampleCode} language=\"jsx\">\r\n  {highlight => null /* ... */}\r\n</Highlight>;\r\n```\r\n\r\nYou can also import the vendored Prism library on its own:\r\n\r\n```js\r\nimport { Prism } from \"prism-react-renderer\";\r\n// or\r\nimport Prism from \"prism-react-renderer/prism\";\r\n```\r\n\r\n</details>\r\n\r\n## LICENSE\r\n\r\nMIT\r\n\r\n## Maintenance Status\r\n\r\n**Active:** Formidable is actively working on this project, and we expect to continue for work for the foreseeable future. Bug reports, feature requests and pull requests are welcome. \r\n\r\n[maintenance-image]: https://img.shields.io/badge/maintenance-active-green.svg\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/FormidableLabs/prism-react-renderer.git"
  },
  "scripts": {
    "build": "run-s build:lib build:es",
    "build:es": "cross-env BABEL_ENV=es babel --ignore '**/__tests__/*' --out-dir es src",
    "build:lib": "cross-env BABEL_ENV=cjs babel --ignore '**/__tests__/*' --out-dir lib src",
    "flow": "flow check",
    "format": "prettier --write src/**/*.js themes/**/*.js",
    "prepublishOnly": "run-p flow build",
    "test": "jest"
  },
  "types": "./index.d.ts",
  "version": "0.1.7"
}
