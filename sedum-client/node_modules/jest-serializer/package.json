{
  "_args": [
    [
      {
        "raw": "jest-serializer@^24.9.0",
        "scope": null,
        "escapedName": "jest-serializer",
        "name": "jest-serializer",
        "rawSpec": "^24.9.0",
        "spec": ">=24.9.0 <25.0.0",
        "type": "range"
      },
      "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client/node_modules/jest-haste-map"
    ]
  ],
  "_cnpm_publish_time": 1565934946480,
  "_from": "jest-serializer@^24.9.0",
  "_hasShrinkwrap": false,
  "_id": "jest-serializer@24.9.0",
  "_location": "/jest-serializer",
  "_nodeVersion": "11.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-serializer_24.9.0_1565934946280_0.8841378903379862"
  },
  "_npmUser": {
    "name": "scotthovestadt",
    "email": "scott.hovestadt@gmail.com"
  },
  "_npmVersion": "lerna/3.15.0/node@v11.12.0+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jest-serializer@^24.9.0",
    "scope": null,
    "escapedName": "jest-serializer",
    "name": "jest-serializer",
    "rawSpec": "^24.9.0",
    "spec": ">=24.9.0 <25.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest-haste-map"
  ],
  "_resolved": "http://registry.npm.souche-inc.com/jest-serializer/download/jest-serializer-24.9.0.tgz",
  "_shasum": "e6d7d7ef96d31e8b9079a714754c5d5c58288e73",
  "_shrinkwrap": null,
  "_spec": "jest-serializer@^24.9.0",
  "_where": "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client/node_modules/jest-haste-map",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {},
  "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "e6d7d7ef96d31e8b9079a714754c5d5c58288e73",
    "size": 3560,
    "noattachment": false,
    "tarball": "http://registry.npm.souche-inc.com/jest-serializer/download/jest-serializer-24.9.0.tgz"
  },
  "engines": {
    "node": ">= 6"
  },
  "gitHead": "9ad0f4bc6b8bdd94989804226c28c9960d9da7d1",
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "rubennorte",
      "email": "rubennorte@gmail.com"
    },
    {
      "name": "scotthovestadt",
      "email": "scott.hovestadt@gmail.com"
    }
  ],
  "name": "jest-serializer",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "publish_time": 1565934946480,
  "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git",
    "directory": "packages/jest-serializer"
  },
  "types": "build/index.d.ts",
  "version": "24.9.0"
}
