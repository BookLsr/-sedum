{
  "_args": [
    [
      {
        "raw": "js-search@^1.4.2",
        "scope": null,
        "escapedName": "js-search",
        "name": "js-search",
        "rawSpec": "^1.4.2",
        "spec": ">=1.4.2 <2.0.0",
        "type": "range"
      },
      "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client"
    ]
  ],
  "_cnpm_publish_time": 1561558155907,
  "_from": "js-search@^1.4.2",
  "_hasShrinkwrap": false,
  "_id": "js-search@1.4.3",
  "_location": "/js-search",
  "_nodeVersion": "11.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/js-search_1.4.3_1561558155713_0.11578792160361173"
  },
  "_npmUser": {
    "name": "brianvaughn",
    "email": "briandavidvaughn@gmail.com"
  },
  "_npmVersion": "6.7.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "js-search@^1.4.2",
    "scope": null,
    "escapedName": "js-search",
    "name": "js-search",
    "rawSpec": "^1.4.2",
    "spec": ">=1.4.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npm.souche-inc.com/js-search/download/js-search-1.4.3.tgz",
  "_shasum": "23a86d7e064ca53a473930edc48615b6b1c1954a",
  "_shrinkwrap": null,
  "_spec": "js-search@^1.4.2",
  "_where": "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client",
  "author": {
    "name": "Brian Vaughn",
    "email": "briandavidvaughn@gmail.com",
    "url": "https://github.com/bvaughn/"
  },
  "bugs": {
    "url": "https://github.com/bvaughn/js-search/issues"
  },
  "dependencies": {},
  "description": "JS Search is an efficient, client-side search library for JavaScript and JSON objects",
  "devDependencies": {
    "babel-cli": "^6.22.2",
    "babel-loader": "^6.2.10",
    "babel-plugin-transform-flow-strip-types": "^6.22.0",
    "babel-preset-latest": "^6.22.0",
    "cross-env": "^3.1.4",
    "flow-bin": "^0.50.0",
    "jest": "^20.0.4",
    "rimraf": "^2.5.4",
    "uglify": "^0.1.5",
    "uglify-js": "^2.7.5",
    "webpack": "^2.2.1"
  },
  "directories": {
    "test": "tests"
  },
  "dist": {
    "shasum": "23a86d7e064ca53a473930edc48615b6b1c1954a",
    "size": 39488,
    "noattachment": false,
    "tarball": "http://registry.npm.souche-inc.com/js-search/download/js-search-1.4.3.tgz"
  },
  "files": [
    "dist"
  ],
  "gitHead": "79dd9a9781c85233c4584cc81043295c30364cef",
  "homepage": "https://github.com/bvaughn/js-search",
  "jest": {
    "setupFiles": [],
    "roots": [
      "./source"
    ],
    "testRegex": "\\.test\\.js$",
    "verbose": true
  },
  "keywords": [
    "search",
    "javascript",
    "js",
    "clientside",
    "client-side",
    "local",
    "query"
  ],
  "license": "MIT",
  "main": "dist/commonjs/index.js",
  "maintainers": [
    {
      "name": "brianvaughn",
      "email": "briandavidvaughn@gmail.com"
    }
  ],
  "name": "js-search",
  "optionalDependencies": {},
  "publish_time": 1561558155907,
  "readme": "[Installation](#installation) |\n[Overview](#overview) |\n[Tokenization](#tokenization) |\n[Stemming](#stemming) |\n[Stop Words](#stop-words) |\n[Search Index](#configuring-the-search-index) |\n[Index Strategy](#configuring-the-index-strategy) \n\n# Js Search: client-side search library\n\nJs Search enables efficient client-side searches of JavaScript and JSON objects.\nIt is ES5 compatible and does not require jQuery or any other third-party libraries.\n\nJs Search began as a lightweight implementation of [Lunr JS](http://lunrjs.com/), offering runtime performance\nimprovements and a smaller file size. It has since expanded to include a rich feature set- supporting stemming,\nstop-words, and TF-IDF ranking.\n\nHere are some JS Perf benchmarks comparing the two search libraries. (Thanks to [olivernn](https://github.com/olivernn)\nfor tweaking the Lunr side for a better comparison!)\n\n* [Initial building of search index](http://jsperf.com/js-search-vs-lunr-js-build-search-index/5)\n* [Running a search](http://jsperf.com/js-search-vs-lunr-js-running-searches/5)\n\nIf you're looking for a simpler, web-worker optimized JS search utility check out [js-worker-search](https://github.com/bvaughn/js-worker-search).\n\n### Installation\n\nYou can install using either [Bower](http://bower.io/) or [NPM](https://www.npmjs.com/) like so:\n\n```shell\nnpm install js-search\nbower install js-search\n```\n\n### Overview\n\nAt a high level you configure Js Search by telling it which fields it should index for searching and then add the\nobjects to be searched.\n\nFor example, a simple use of JS Search would be as follows:\n\n```javascript\nimport * as JsSearch from 'js-search';\n\nvar theGreatGatsby = {\n  isbn: '9781597226769',\n  title: 'The Great Gatsby',\n  author: {\n    name: 'F. Scott Fitzgerald'\n  },\n  tags: ['book', 'inspirational']\n};\nvar theDaVinciCode = {\n  isbn: '0307474275',\n  title: 'The DaVinci Code',\n  author: {\n    name: 'Dan Brown'\n  },\n  tags: ['book', 'mystery']\n};\nvar angelsAndDemons = {\n  isbn: '074349346X',\n  title: 'Angels & Demons',\n  author: {\n    name: 'Dan Brown',\n  },\n  tags: ['book', 'mystery']\n};\n\nvar search = new JsSearch.Search('isbn');\nsearch.addIndex('title');\nsearch.addIndex(['author', 'name']);\nsearch.addIndex('tags')\n\nsearch.addDocuments([theGreatGatsby, theDaVinciCode, angelsAndDemons]);\n\nsearch.search('The');    // [theGreatGatsby, theDaVinciCode]\nsearch.search('scott');  // [theGreatGatsby]\nsearch.search('dan');    // [angelsAndDemons, theDaVinciCode]\nsearch.search('mystery') // [angelsAndDemons, theDaVinciCode]\n```\n\n### Tokenization\n\nTokenization is the process of breaking text (e.g. sentences) into smaller, searchable tokens (e.g. words or parts of\nwords). Js Search provides a basic tokenizer that should work well for English but you can provide your own like so:\n\n```javascript\nsearch.tokenizer = {\n  tokenize( text /* string */ ) {\n    // Convert text to an Array of strings and return the Array\n  }\n};\n```\n\n### Stemming\n\nStemming is the process of reducing search tokens to their root (or \"stem\") so that searches for different forms of a\nword will still yield results. For example \"search\", \"searching\" and \"searched\" can all be reduced to the stem \"search\".\n\nJs Search does not implement its own stemming library but it does support stemming through the use of third-party\nlibraries.\n\nTo enable stemming, use the `StemmingTokenizer` like so:\n\n```javascript\nvar stemmer = require('porter-stemmer').stemmer;\n\nsearch.tokenizer =\n\tnew JsSearch.StemmingTokenizer(\n        stemmer, // Function should accept a string param and return a string\n\t    new JsSearch.SimpleTokenizer());\n```\n\n### Stop Words\n\nStop words are very common (e.g. a, an, and, the, of) and are often not semantically meaningful. By default Js Search\ndoes not filter these words, but filtering can be enabled by using the `StopWordsTokenizer` like so:\n\n```javascript\nsearch.tokenizer =\n\tnew JsSearch.StopWordsTokenizer(\n    \tnew JsSearch.SimpleTokenizer());\n```\n\nBy default Js Search uses a slightly modified version of the Google History stop words listed on\n[www.ranks.nl/stopwords](http://www.ranks.nl/stopwords). You can modify this list of stop words by adding or removing\nvalues from the `JsSearch.StopWordsMap` object like so:\n\n```javascript\nJsSearch.StopWordsMap.the = false; // Do not treat \"the\" as a stop word\nJsSearch.StopWordsMap.bob = true;  // Treat \"bob\" as a stop word\n```\n\nNote that stop words are lower case and so using a case-sensitive sanitizer may prevent some stop words from being\nremoved.\n\n### Configuring the search index\n\nThere are two search indices packaged with `js-search`.\n\nTerm frequencyâ€“inverse document frequency (or TF-IDF) is a numeric statistic intended to reflect how important a word\n(or words) are to a document within a corpus. The TF-IDF value increases proportionally to the number of times a word\nappears in the document but is offset by the frequency of the word in the corpus. This helps to adjust for the fact that\nsome words (e.g. and, or, the) appear more frequently than others.\n\nBy default Js Search supports TF-IDF ranking but this can be disabled for performance reasons if it is not required. You\ncan specify an alternate [`ISearchIndex`](https://github.com/bvaughn/js-search/blob/master/source/SearchIndex/SearchIndex.js)\nimplementation in order to disable TF-IDF, like so:\n\n```javascript\n// default\nsearch.searchIndex = new JsSearch.TfIdfSearchIndex();\n\n// Search index capable of returning results matching a set of tokens\n// but without any meaningful rank or order.\nsearch.searchIndex = new JsSearch.UnorderedSearchIndex();\n```\n\n### Configuring the index strategy\n\nThere are three index strategies packaged with `js-search`.\n\n`PrefixIndexStrategy` indexes for prefix searches.\n(e.g. the term \"cat\" is indexed as \"c\", \"ca\", and \"cat\" allowing prefix search lookups).\n\n`AllSubstringsIndexStrategy` indexes for all substrings. In other word \"c\", \"ca\", \"cat\", \"a\", \"at\", and \"t\" all match \"cat\".\n\n`ExactWordIndexStrategy` indexes for exact word matches. For example \"bob\" will match \"bob jones\" (but \"bo\" will not).\n\nBy default Js Search supports prefix indexing but this is configurable. You\ncan specify an alternate [`IIndexStrategy`](https://github.com/bvaughn/js-search/blob/master/source/IndexStrategy/IndexStrategy.js)\nimplementation in order to disable prefix indexing, like so:\n\n```javascript\n// default\nsearch.indexStrategy = new JsSearch.PrefixIndexStrategy();\n\n// this index strategy is built for all substrings matches.\nsearch.indexStrategy = new JsSearch.AllSubstringsIndexStrategy();\n\n// this index strategy is built for exact word matches.\nsearch.indexStrategy = new JsSearch.ExactWordIndexStrategy();\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bvaughn/js-search.git"
  },
  "scripts": {
    "build": "npm run build:commonjs && npm run build:umd",
    "build:commonjs": "cross-env NODE_ENV=production babel source --out-dir dist/commonjs --source-maps --ignore test.js",
    "build:umd": "cross-env NODE_ENV=production webpack --config webpack.config.js --bail",
    "clean": "rimraf dist",
    "flow": "flow source",
    "postbuild:umd": "uglifyjs dist/umd/js-search.js -o dist/umd/js-search.min.js --source-map dist/umd/js-search.min.js.map -p 5 -c -m",
    "prebuild": "flow",
    "prebuild:commonjs": "rimraf dist/commonjs",
    "prebuild:umd": "rimraf dist/umd",
    "pretest": "flow",
    "tdd": "jest --watch",
    "test": "jest"
  },
  "version": "1.4.3"
}
