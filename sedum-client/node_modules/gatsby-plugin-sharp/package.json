{
  "_args": [
    [
      {
        "raw": "gatsby-plugin-sharp@^2.2.19",
        "scope": null,
        "escapedName": "gatsby-plugin-sharp",
        "name": "gatsby-plugin-sharp",
        "rawSpec": "^2.2.19",
        "spec": ">=2.2.19 <3.0.0",
        "type": "range"
      },
      "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client"
    ]
  ],
  "_cnpm_publish_time": 1574775048176,
  "_from": "gatsby-plugin-sharp@^2.2.19",
  "_hasShrinkwrap": false,
  "_id": "gatsby-plugin-sharp@2.3.4",
  "_location": "/gatsby-plugin-sharp",
  "_nodeVersion": "12.3.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gatsby-plugin-sharp_2.3.4_1574775047935_0.14760914597570363"
  },
  "_npmUser": {
    "name": "freiksenet",
    "email": "freiksenet@gmail.com"
  },
  "_npmVersion": "lerna/3.19.0/node@v12.3.1+x64 (linux)",
  "_phantomChildren": {
    "lodash": "4.17.15"
  },
  "_requested": {
    "raw": "gatsby-plugin-sharp@^2.2.19",
    "scope": null,
    "escapedName": "gatsby-plugin-sharp",
    "name": "gatsby-plugin-sharp",
    "rawSpec": "^2.2.19",
    "spec": ">=2.2.19 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://registry.npm.souche-inc.com/gatsby-plugin-sharp/download/gatsby-plugin-sharp-2.3.4.tgz",
  "_shasum": "1b9e21b56145413b4f1807c685574956a2efba7d",
  "_shrinkwrap": null,
  "_spec": "gatsby-plugin-sharp@^2.2.19",
  "_where": "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client",
  "author": {
    "name": "Kyle Mathews",
    "email": "mathews.kyle@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gatsbyjs/gatsby/issues"
  },
  "dependencies": {
    "@babel/runtime": "^7.7.4",
    "async": "^2.6.3",
    "bluebird": "^3.7.1",
    "fs-extra": "^8.1.0",
    "gatsby-core-utils": "^1.0.21",
    "got": "^8.3.2",
    "imagemin": "^6.1.0",
    "imagemin-mozjpeg": "^8.0.0",
    "imagemin-pngquant": "^6.0.1",
    "imagemin-webp": "^5.1.0",
    "lodash": "^4.17.15",
    "mini-svg-data-uri": "^1.1.3",
    "p-defer": "^3.0.0",
    "potrace": "^2.1.2",
    "probe-image-size": "^4.1.1",
    "progress": "^2.0.3",
    "semver": "^5.7.1",
    "sharp": "^0.23.3",
    "svgo": "1.3.2",
    "uuid": "^3.3.3"
  },
  "description": "Wrapper of the Sharp image manipulation library for Gatsby plugins",
  "devDependencies": {
    "@babel/cli": "^7.7.4",
    "@babel/core": "^7.7.4",
    "babel-preset-gatsby-package": "^0.2.12",
    "cross-env": "^5.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "1b9e21b56145413b4f1807c685574956a2efba7d",
    "size": 24488,
    "noattachment": false,
    "tarball": "http://registry.npm.souche-inc.com/gatsby-plugin-sharp/download/gatsby-plugin-sharp-2.3.4.tgz"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "gitHead": "168bb344d6a5e7f71aa4f3812fd3fb22ae0a7416",
  "homepage": "https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-sharp#readme",
  "keywords": [
    "gatsby",
    "gatsby-plugin",
    "image",
    "sharp"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "blainekasten",
      "email": "blainekasten@gmail.com"
    },
    {
      "name": "dschau",
      "email": "dustinschau@gmail.com"
    },
    {
      "name": "freiksenet",
      "email": "freiksenet@gmail.com"
    },
    {
      "name": "jamo",
      "email": "jamo@isotalo.fi"
    },
    {
      "name": "johno",
      "email": "johnotander@gmail.com"
    },
    {
      "name": "kylemathews",
      "email": "mathews.kyle@gmail.com"
    },
    {
      "name": "m-allanson",
      "email": "michael.allanson@gmail.com"
    },
    {
      "name": "madalynrose",
      "email": "madalyn.parker@gmail.com"
    },
    {
      "name": "monastic.panic",
      "email": "monastic.panic@gmail.com"
    },
    {
      "name": "moocar",
      "email": "anthony@moocar.me"
    },
    {
      "name": "pieh",
      "email": "misiek.piechowiak@gmail.com"
    },
    {
      "name": "sidharthachatterjee",
      "email": "me@sidharthachatterjee.com"
    },
    {
      "name": "tylerbarnes",
      "email": "tyler@known.design"
    },
    {
      "name": "vladar",
      "email": "vladimir.razuvaev@gmail.com"
    },
    {
      "name": "wardpeet",
      "email": "ward@coding-tech.com"
    }
  ],
  "name": "gatsby-plugin-sharp",
  "optionalDependencies": {},
  "peerDependencies": {
    "gatsby": ">2.0.15"
  },
  "publish_time": 1574775048176,
  "readme": "# gatsby-plugin-sharp\n\nExposes several image processing functions built on the\n[Sharp image processing library](https://github.com/lovell/sharp). This is a\nlow-level helper plugin generally used by other Gatsby plugins. You generally\nshouldn't be using this directly but might find it helpful if doing very custom\nimage processing.\n\nIt aims to provide excellent out-of-the box settings for processing common web\nimage formats.\n\nFor JPEGs it generates progressive images with a default quality level of 50.\n\nFor PNGs it uses [pngquant](https://github.com/pornel/pngquant) to compress\nimages. By default it uses a quality setting of [50-75]. The `pngCompressionSpeed`\nvalue is a speed/quality trade-off from 1 (brute-force) to 10 (fastest). Speed\n10 has 5% lower quality, but is 8 times faster than the default (4). In most\ncases you should stick with the default, but if you have very large numbers\nof PNGs then it can significantly reduce build times.\n\n## Install\n\n`npm install --save gatsby-plugin-sharp`\n\n## How to use\n\n```javascript\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-sharp`,\n    options: {\n      useMozJpeg: false,\n      stripMetadata: true,\n      defaultQuality: 75,\n    },\n  },\n]\n```\n\n## Methods\n\n### resize\n\n#### Parameters\n\n- `width` (int, default: 400)\n- `height` (int)\n- `quality` (int, default: 50)\n- `jpegQuality` (int)\n- `pngQuality` (int)\n- `webpQuality` (int)\n- `jpegProgressive` (bool, default: true)\n- `pngCompressionLevel` (int, default: 9)\n- `base64`(bool, default: false)\n\n#### Returns\n\n- `src` (string)\n- `width` (int)\n- `height` (int)\n- `aspectRatio` (float)\n\n### fixed\n\nAutomatically create sizes for different resolutions — we do 1x, 1.5x, and 2x.\n\n#### Parameters\n\n- `width` (int, default: 400)\n- `height` (int)\n- `quality` (int, default: 50)\n- `jpegQuality` (int)\n- `pngQuality` (int)\n- `webpQuality` (int)\n\n#### Returns\n\n- `base64` (string)\n- `aspectRatio` (float)\n- `width` (float)\n- `height` (float)\n- `src` (string)\n- `srcSet` (string)\n\n### fluid\n\nCreate fluid sizes (in width) for the image. If the max width of the container for the\nrendered markdown file is 800px, the sizes would then be: 200px, 400px, 800px, 1200px,\n1600px – enough to provide close to the optimal image size for every device\nsize / screen resolution.\n\nIf you want more control over which sizes are output you can use the `srcSetBreakpoints`\nparameter. For example, if you want images that are 200, 340, 520, and 890 wide you\ncan add `srcSetBreakpoints: [ 200, 340, 520, 890 ]` as a parameter. You will also get\n`maxWidth` as a breakpoint (which is 800 by default), so you will actually get\n`[ 200, 340, 520, 800, 890 ]` as breakpoints.\n\nOn top of that, `fluid` returns everything else (namely aspectRatio and\na base64 image to use as a placeholder) you need to implement the \"blur up\"\ntechnique popularized by Medium and Facebook (and also available as a Gatsby\nplugin for Markdown content as gatsby-remark-images).\n\nWhen both a `maxWidth` and `maxHeight` are provided, sharp will use `COVER` as a fit strategy by default. This might not be ideal so you can now choose between `COVER`, `CONTAIN` and `FILL` as a fit strategy. To see them in action the [CSS property object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) comes close to its implementation.\n\n#### Note\n\nfit strategies `CONTAIN` and `FILL` will not work when `cropFocus` is assigned to [sharp.strategy][6]. The `cropFocus` option cannot be `ENTROPY` or `ATTENTION`\n\n#### Parameters\n\n- `maxWidth` (int, default: 800)\n- `maxHeight` (int)\n- `quality` (int, default: 50)\n- `jpegQuality` (int)\n- `pngQuality` (int)\n- `webpQuality` (int)\n- `srcSetBreakpoints` (array of int, default: [])\n- `fit` (string, default: '[sharp.fit.cover][6]')\n- `background` (string, default: 'rgba(0,0,0,1)')\n- [deprecated] `sizeByPixelDensity` (bool, default: false)\n  - Pixel density is only used in vector images, which Gatsby’s implementation of Sharp doesn’t support. This option is currently a no-op and will be removed in the next major version of Gatsby.\n\n#### Returns\n\n- `base64` (string)\n- `aspectRatio` (float)\n- `src` (string)\n- `srcSet` (string)\n- `srcSetType` (string)\n- `sizes` (string)\n- `originalImg` (string)\n\n### Shared Options\n\nIn addition to their individual parameters, all methods above share the\nfollowing:\n\n- `grayscale` (bool, default: false)\n- `duotone` (bool|obj, default: false)\n- `toFormat` (string, default: '')\n- `cropFocus` (string, default: '[sharp.strategy.attention][6]')\n- `pngCompressionSpeed` (int, default: 4)\n\n#### toFormat\n\nConvert the source image to one of the following available options: `NO_CHANGE`,\n`JPG`, `PNG`, `WEBP`.\n\n#### cropFocus\n\nChange the cropping focus. Available options: `CENTER`, `NORTH`, `NORTHEAST`,\n`EAST`, `SOUTHEAST`, `SOUTH`, `SOUTHWEST`, `WEST`, `NORTHWEST`, `ENTROPY`,\n`ATTENTION`. See Sharp's [crop][6].\n\n#### rotate\n\nRotate the image (after cropping). See Sharp's [rotate][7].\n\n#### grayscale\n\nUses Sharp's [greyscale][8] to convert the source image to 8-bit greyscale, 256\nshades of grey, e.g.\n\n```javascript\nallImageSharp {\n  edges {\n    node {\n      ... on ImageSharp {\n        resize(width: 150, height: 150, grayscale: true) {\n          src\n        }\n      }\n    }\n  }\n}\n```\n\n#### duotone\n\nApplys a \"duotone\" effect (see [I][1], [II][2], [III][3]) to the source image if\ngiven two hex colors `shadow` and `highlight` defining start and end color of\nthe duotone gradient, e.g.\n\n```javascript\nfixed(\n  width: 800,\n  duotone: {\n    highlight: \"#f00e2e\",\n    shadow: \"#192550\"\n  }\n) {\n  src\n  srcSet\n  base64\n}\n```\n\nthe source image colors will be converted to match a gradient color chosen based\non each pixel's [relative luminance][4].\\\nLogic is borrowed from [react-duotone][5].\n\nYou can pass a third optional parameter, `opacity`:\n\n```javascript\nfluid(\n  width: 800,\n  duotone: {\n    highlight: \"#f00e2e\",\n    shadow: \"#192550\",\n    opacity: 50\n  }\n) {\n  src\n  srcSet\n  base64\n}\n```\n\nIf set, a semi-transparent version of duotone'd image will be composited over\nthe original image, allowing the original image and its colors to partially\n\"shine through\". _Heads up_: If the original image contains an alpha channel it\nwill be [flattened][15] before creating the composite.\n\nThis works by adding an alpha channel to the duotone'd image - then we let Sharp\ndo its magic via\n[`overlayWith`](http://sharp.pixelplumbing.com/en/stable/api-composite/#overlaywith);\nquoting the Sharp documentation:\n\n> If the overlay image contains an alpha channel then composition with\n> <a href=\"https://en.wikipedia.org/wiki/Alpha_compositing\">premultiplication</a>\n> will occur.\n\n#### tracedSVG\n\nGenerates a traced SVG of the image (see [the original GitHub issue][9]) and\nreturns the SVG as \"[optimized URL-encoded][10]\" `data:` URI. It it used in\n[gatsby-image](/packages/gatsby-image/) to provide an\nalternative to the default inline base64 placeholder image.\n\nUses [node-potrace][11] and [SVGO][12] under the hood. Default settings for\nnode-potrace:\n\n```javascript\n  {\n    color: `lightgray`,\n    optTolerance: 0.4,\n    turdSize: 100,\n    turnPolicy: TURNPOLICY_MAJORITY,\n  }\n```\n\nAll [node-potrace `Potrace` parameters][13] are exposed and can be set via the\n`traceSVG` argument:\n\n```javascript\nfixed(\n  traceSVG: {\n    color: \"#f00e2e\"\n    turnPolicy: TURNPOLICY_MINORITY\n    blackOnWhite: false\n  }\n) {\n  src\n  srcSet\n  tracedSVG\n}\n```\n\n### Setting a default quality\n\nYou can pass a default image quality to `sharp` by setting the `defaultQuality` option.\n\n### Using MozJPEG\n\nYou can opt-in to use [MozJPEG][16] for jpeg-encoding. MozJPEG provides even\nbetter image compression than the default encoder used in `gatsby-plugin-sharp`.\nHowever, when using MozJPEG the build time of your Gatsby project will increase\nsignificantly.\n\nTo enable MozJPEG, you can set the `useMozJpeg` plugin option to `true` in\n`gatsby-config.js`.\n\nFor backwards compatible reasons, if `useMozJpeg` is not defined in the plugin\noptions, the [environment variable](/docs/environment-variables/#environment-variables)\n`GATSBY_JPEG_ENCODER` acts as a fallback if set to `MOZJPEG`:\n\n```shell\nGATSBY_JPEG_ENCODER=MOZJPEG\n```\n\n### EXIF and ICC metadata\n\nBy default, `gatsby-plugin-sharp` strips all EXIF, ICC and other metadata\npresent in your source file. This is the recommended default as it leads to\nsmaller file sizes.\n\nHowever, in situations where you wish to preserve EXIF metadata or ICC profiles\n(example: you are building a photography portfolio and wish to conserve\nthe color profile or the copyright information of the photos you've exported\nfrom Adobe Lightroom or Phase One's Capture One), you can set the `stripMetadata`\nplugin option to `false` in `gatsby-config.js`.\n\nIt is important to note that if `stripMetadata` is set to `false`, **all**\nmetadata information will be preserved from the source image, including but not\nlimited to the latitude/longitude information of where the picture was taken\n(if present). If you wish to strip this information from the source file, you\ncan either leave `stripMetadata` to its default of `true`, or manually\npre-process your images with a tool such as [ExifTool][17].\n\n## Troubleshooting\n\n### Incompatible library version: sharp.node requires version X or later, but Z provides version Y\n\nThis means that there are multiple incompatible versions of the `sharp` package installed in `node_modules`. The complete error typically looks like this:\n\n```\nSomething went wrong installing the \"sharp\" module\n\ndlopen(/Users/misiek/dev/gatsby-starter-blog/node_modules/sharp/build/Release/sharp.node, 1): Library not loaded: @rpath/libglib-2.0.dylib\n  Referenced from: /Users/misiek/dev/gatsby-starter-blog/node_modules/sharp/build/Release/sharp.node\n  Reason: Incompatible library version: sharp.node requires version 6001.0.0 or later, but libglib-2.0.dylib provides version 5801.0.0\n```\n\nTo fix this, you'll need to update all Gatsby plugins in the current project that depend on the `sharp` package. Here's a list of official plugins that you might need to update in case your projects uses them:\n\n- `gatsby-plugin-sharp`\n- `gatsby-plugin-manifest`\n- `gatsby-remark-images-contentful`\n- `gatsby-source-contentful`\n- `gatsby-transformer-sharp`\n- `gatsby-transformer-sqip`\n\nTo update these packages, run:\n\n```shell\nnpm install gatsby-plugin-sharp gatsby-plugin-manifest gatsby-remark-images-contentful gatsby-source-contentful gatsby-transformer-sharp gatsby-transformer-sqip\n```\n\nIf updating these doesn't fix the issue, your project probably uses other plugins from the community that depend on a different version of `sharp`. Try running `npm list sharp` or `yarn why sharp` to see all packages in the current project that use `sharp` and try updating them as well.\n\n[1]: https://alistapart.com/article/finessing-fecolormatrix\n[2]: http://blog.72lions.com/blog/2015/7/7/duotone-in-js\n[3]: https://ines.io/blog/dynamic-duotone-svg-jade\n[4]: https://en.wikipedia.org/wiki/Relative_luminance\n[5]: https://github.com/nagelflorian/react-duotone\n[6]: http://sharp.pixelplumbing.com/en/stable/api-resize/#crop\n[7]: http://sharp.pixelplumbing.com/en/stable/api-operation/#rotate\n[8]: http://sharp.pixelplumbing.com/en/stable/api-colour/#greyscale\n[9]: https://github.com/gatsbyjs/gatsby/issues/2435\n[10]: https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\n[11]: https://github.com/tooolbox/node-potrace\n[12]: https://github.com/svg/svgo\n[13]: https://github.com/tooolbox/node-potrace#parameters\n[14]: https://github.com/oliver-moran/jimp\n[15]: http://sharp.pixelplumbing.com/en/stable/api-operation/#flatten\n[16]: https://github.com/mozilla/mozjpeg\n[17]: https://www.sno.phy.queensu.ca/~phil/exiftool/\n[18]: https://www.npmjs.com/package/color\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gatsbyjs/gatsby.git",
    "directory": "packages/gatsby-plugin-sharp"
  },
  "scripts": {
    "build": "babel src --out-dir . --ignore **/__tests__",
    "prepare": "cross-env NODE_ENV=production npm run build",
    "watch": "babel -w src --out-dir . --ignore **/__tests__"
  },
  "version": "2.3.4"
}
