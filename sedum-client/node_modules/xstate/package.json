{
  "_args": [
    [
      {
        "raw": "xstate@^4.6.7",
        "scope": null,
        "escapedName": "xstate",
        "name": "xstate",
        "rawSpec": "^4.6.7",
        "spec": ">=4.6.7 <5.0.0",
        "type": "range"
      },
      "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client/node_modules/gatsby"
    ]
  ],
  "_cnpm_publish_time": 1562770566285,
  "_from": "xstate@^4.6.7",
  "_hasShrinkwrap": false,
  "_id": "xstate@4.6.7",
  "_location": "/xstate",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/xstate_4.6.7_1562770566140_0.632034702471457"
  },
  "_npmUser": {
    "name": "davidkpiano",
    "email": "davidkpiano@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xstate@^4.6.7",
    "scope": null,
    "escapedName": "xstate",
    "name": "xstate",
    "rawSpec": "^4.6.7",
    "spec": ">=4.6.7 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gatsby",
    "/gatsby-source-filesystem"
  ],
  "_resolved": "http://registry.npm.souche-inc.com/xstate/download/xstate-4.6.7.tgz",
  "_shasum": "1f325df07d75676c90d65b17a3a56692f259fd41",
  "_shrinkwrap": null,
  "_spec": "xstate@^4.6.7",
  "_where": "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client/node_modules/gatsby",
  "author": {
    "name": "David Khourshid",
    "email": "davidkpiano@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/davidkpiano/xstate/issues"
  },
  "dependencies": {},
  "description": "Finite State Machines and Statecharts for the Modern Web.",
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/chai-subset": "^1.3.2",
    "@types/core-js": "^2.5.0",
    "@types/mocha": "^2.2.44",
    "@types/node": "^8.10.38",
    "@vuepress/plugin-google-analytics": "^1.0.2",
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.3",
    "babel-plugin-annotate-pure-calls": "^0.3.0",
    "chai": "^4.2.0",
    "chai-subset": "^1.6.0",
    "cpy-cli": "^2.0.0",
    "gh-pages": "^2.0.1",
    "husky": "^2.5.0",
    "jsdom": "^14.0.0",
    "jsdom-global": "^3.0.2",
    "lerna": "^3.13.1",
    "lint-staged": "^8.2.1",
    "markdown-it-codesandbox-embed": "^0.1.0",
    "mocha": "^3.5.3",
    "nyc": "^14.1.1",
    "prettier": "^1.18.2",
    "rollup": "^1.4.0",
    "rollup-plugin-filesize": "^6.0.1",
    "rollup-plugin-replace": "^2.1.0",
    "rollup-plugin-terser": "^4.0.4",
    "rollup-plugin-typescript2": "^0.21.1",
    "rollup-plugin-uglify": "^6.0.0",
    "rxjs": "^6.5.1",
    "scion-core-test-framework": "^1.0.0",
    "scxml-test-framework": "^1.0.2",
    "source-map-support": "^0.5.12",
    "ts-node": "^8.1.0",
    "tslint": "^5.11.0",
    "typedoc": "^0.14.2",
    "typescript": "^3.4.5",
    "vuepress": "^1.0.1",
    "webpack-dev-middleware": "^3.6.0",
    "xml-js": "^1.6.8"
  },
  "directories": {},
  "dist": {
    "shasum": "1f325df07d75676c90d65b17a3a56692f259fd41",
    "size": 209063,
    "noattachment": false,
    "tarball": "http://registry.npm.souche-inc.com/xstate/download/xstate-4.6.7.tgz"
  },
  "files": [
    "dist",
    "lib",
    "es"
  ],
  "gitHead": "83f1d586b4382a819550736e819f0406785e0db8",
  "homepage": "https://github.com/davidkpiano/xstate#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "statechart",
    "state machine",
    "finite state machine",
    "finite automata",
    "scxml",
    "state",
    "interpreter"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.{ts,json,md}": [
      "prettier --write",
      "git add"
    ]
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "davidkpiano",
      "email": "davidkpiano@gmail.com"
    }
  ],
  "module": "es/index.js",
  "name": "xstate",
  "nyc": {
    "extension": [
      ".ts"
    ],
    "include": [
      "src/**/*.ts"
    ],
    "exclude": [
      "**/*.d.ts*/"
    ],
    "reporter": [
      "text",
      "html"
    ],
    "all": true
  },
  "optionalDependencies": {},
  "publish_time": 1562770566285,
  "readme": "<p align=\"center\">\n  <a href=\"https://xstate.js.org\">\n  <br />\n  <img src=\"https://i.imgur.com/FshbFOv.png\" alt=\"XState\" width=\"100\"/>\n  <br />\n  <sub>JavaScript state machines and statecharts</sub>\n  <br />\n  <br />\n  </a>\n</p>\n\n[![Build Status](https://davidkpiano.visualstudio.com/xstate/_apis/build/status/davidkpiano.xstate)](https://davidkpiano.visualstudio.com/xstate/_build/latest?definitionId=1)\n[![npm version](https://badge.fury.io/js/xstate.svg)](https://badge.fury.io/js/xstate)\n[![Statecharts gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/statecharts/statecharts)\n<img src=\"https://opencollective.com/xstate/tiers/backer/badge.svg?label=sponsors&color=brightgreen\" />\n\nJavaScript and TypeScript [finite state machines](https://en.wikipedia.org/wiki/Finite-state_machine) and [statecharts](http://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf) for the modern web.\n\nðŸ“– [Read the documentation](https://xstate.js.org/docs)\n\nAdheres to the [SCXML specification](https://www.w3.org/TR/scxml/).\n\n[**Version 3.x to 4 Migration Guide**](./migration.md)\n\n## Super quick start\n\n```bash\nnpm install xstate\n```\n\n```js\nimport { Machine, interpret } from 'xstate';\n\n// Stateless machine definition\n// machine.transition(...) is a pure function used by the interpreter.\nconst toggleMachine = Machine({\n  id: 'toggle',\n  initial: 'inactive',\n  states: {\n    inactive: { on: { TOGGLE: 'active' } },\n    active: { on: { TOGGLE: 'inactive' } }\n  }\n});\n\n// Machine instance with internal state\nconst toggleService = interpret(toggleMachine)\n  .onTransition(state => console.log(state.value))\n  .start();\n// => 'inactive'\n\ntoggleService.send('TOGGLE');\n// => 'active'\n\ntoggleService.send('TOGGLE');\n// => 'inactive'\n```\n\n- [Visualizer](#visualizer)\n- [Why? (info about statecharts)](#why)\n- [Installation](#installation)\n- [Finite State Machines](#finite-state-machines)\n- [Hierarchical (Nested) State Machines](#hierarchical-nested-state-machines)\n- [Parallel State Machines](#parallel-state-machines)\n- [History States](#history-states)\n\n## Visualizer\n\n**[:new: Preview and simulate your statecharts in the XState visualizer (beta)!](https://statecharts.github.io/xstate-viz)**\n\n<a href=\"https://statecharts.github.io/xstate-viz\" title=\"xstate visualizer\"><img src=\"https://i.imgur.com/3pEB0B3.png\" alt=\"xstate visualizer\" width=\"300\" /></a>\n\n## Why?\n\nStatecharts are a formalism for modeling stateful, reactive systems. This is useful for declaratively describing the _behavior_ of your application, from the individual components to the overall application logic.\n\nRead [ðŸ“½ the slides](http://slides.com/davidkhourshid/finite-state-machines) ([ðŸŽ¥ video](https://www.youtube.com/watch?v=VU1NKX6Qkxc)) or check out these resources for learning about the importance of finite state machines and statecharts in user interfaces:\n\n- [Statecharts - A Visual Formalism for Complex Systems](http://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf) by David Harel\n- [The World of Statecharts](https://statecharts.github.io/) by Erik Mogensen\n- [Pure UI](https://rauchg.com/2015/pure-ui) by Guillermo Rauch\n- [Pure UI Control](https://medium.com/@asolove/pure-ui-control-ac8d1be97a8d) by Adam Solove\n- [Spectrum - Statecharts Community](https://spectrum.chat/statecharts)\n\n\n## Finite State Machines\n\n<img src=\"https://imgur.com/rqqmkJh.png\" alt=\"Light Machine\" width=\"300\" />\n\n```js\nimport { Machine } from 'xstate';\n\nconst lightMachine = Machine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      }\n    }\n  }\n});\n\nconst currentState = 'green';\n\nconst nextState = lightMachine.transition(currentState, 'TIMER').value;\n\n// => 'yellow'\n```\n\n## Hierarchical (Nested) State Machines\n\n<img src=\"https://imgur.com/GDZAeB9.png\" alt=\"Hierarchical Light Machine\" width=\"300\" />\n\n```js\nimport { Machine } from 'xstate';\n\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_TIMER: 'wait'\n      }\n    },\n    wait: {\n      on: {\n        PED_TIMER: 'stop'\n      }\n    },\n    stop: {}\n  }\n};\n\nconst lightMachine = Machine({\n  id: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      },\n      ...pedestrianStates\n    }\n  }\n});\n\nconst currentState = 'yellow';\n\nconst nextState = lightMachine.transition(currentState, 'TIMER').value;\n// => {\n//   red: 'walk'\n// }\n\nlightMachine.transition('red.walk', 'PED_TIMER').value;\n// => {\n//   red: 'wait'\n// }\n```\n\n**Object notation for hierarchical states:**\n\n```js\n// ...\nconst waitState = lightMachine.transition({ red: 'walk' }, 'PED_TIMER').value;\n\n// => { red: 'wait' }\n\nlightMachine.transition(waitState, 'PED_TIMER').value;\n\n// => { red: 'stop' }\n\nlightMachine.transition({ red: 'stop' }, 'TIMER').value;\n\n// => 'green'\n```\n\n## Parallel State Machines\n\n<img src=\"https://imgur.com/GKd4HwR.png\" width=\"300\" alt=\"Parallel state machine\" />\n\n```js\nconst wordMachine = Machine({\n  id: 'word',\n  type: 'parallel',\n  states: {\n    bold: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_BOLD: 'off' }\n        },\n        off: {\n          on: { TOGGLE_BOLD: 'on' }\n        }\n      }\n    },\n    underline: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_UNDERLINE: 'off' }\n        },\n        off: {\n          on: { TOGGLE_UNDERLINE: 'on' }\n        }\n      }\n    },\n    italics: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_ITALICS: 'off' }\n        },\n        off: {\n          on: { TOGGLE_ITALICS: 'on' }\n        }\n      }\n    },\n    list: {\n      initial: 'none',\n      states: {\n        none: {\n          on: { BULLETS: 'bullets', NUMBERS: 'numbers' }\n        },\n        bullets: {\n          on: { NONE: 'none', NUMBERS: 'numbers' }\n        },\n        numbers: {\n          on: { BULLETS: 'bullets', NONE: 'none' }\n        }\n      }\n    }\n  }\n});\n\nconst boldState = wordMachine.transition('bold.off', 'TOGGLE_BOLD').value;\n\n// {\n//   bold: 'on',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nconst nextState = wordMachine.transition(\n  {\n    bold: 'off',\n    italics: 'off',\n    underline: 'on',\n    list: 'bullets'\n  },\n  'TOGGLE_ITALICS'\n).value;\n\n// {\n//   bold: 'off',\n//   italics: 'on',\n//   underline: 'on',\n//   list: 'bullets'\n// }\n```\n\n## History States\n\n<img src=\"https://imgur.com/I4QsQsz.png\" width=\"300\" alt=\"Machine with history state\" />\n\n```js\nconst paymentMachine = Machine({\n  id: 'payment',\n  initial: 'method',\n  states: {\n    method: {\n      initial: 'cash',\n      states: {\n        cash: { on: { SWITCH_CHECK: 'check' } },\n        check: { on: { SWITCH_CASH: 'cash' } },\n        hist: { type: 'history' }\n      },\n      on: { NEXT: 'review' }\n    },\n    review: {\n      on: { PREVIOUS: 'method.hist' }\n    }\n  }\n});\n\nconst checkState = paymentMachine.transition('method.cash', 'SWITCH_CHECK');\n\n// => State {\n//   value: { method: 'check' },\n//   history: State { ... }\n// }\n\nconst reviewState = paymentMachine.transition(checkState, 'NEXT');\n\n// => State {\n//   value: 'review',\n//   history: State { ... }\n// }\n\nconst previousState = paymentMachine.transition(reviewState, 'PREVIOUS').value;\n\n// => { method: 'check' }\n```\n\n## Sponsors\n\nHuge thanks to the following companies for sponsoring `xstate`. You can sponsor further `xstate` development [on OpenCollective](https://opencollective.com/xstate).\n\n<a href=\"https://tipe.io\" title=\"Tipe.io\"><img src=\"https://cdn.tipe.io/tipe/tipe-logo.svg?w=240\" style=\"background:#613DEF\" /></a>\n<a href=\"https://webflow.com\" title=\"Webflow\"><img src=\"https://uploads-ssl.webflow.com/583347ca8f6c7ee058111b3b/5b03bde0971fdd75d75b5591_webflow.png\" height=\"100\" /></a>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidkpiano/xstate.git"
  },
  "scripts": {
    "build": "npm run build:cjs && npm run build:es && npm run build:umd",
    "build:cjs": "tsc",
    "build:es": "tsc --outDir es -m ES2015",
    "build:umd": "rollup -c",
    "ci": "npm run build && npm run compile:es && npm run compile:lib && npm run test",
    "compile:es": "tsc -p tsconfig.es.json",
    "compile:lib": "tsc -p tsconfig.lib.json",
    "docs:build": "npm run docs:readme && npm run docs:packages && vuepress build docs",
    "docs:dev": "npm run docs:packages && vuepress dev docs",
    "docs:packages": "cpy 'packages/*/README.md' docs --parents --rename=index.md",
    "docs:publish": "npm run docs:build && gh-pages --dist ./docs/.vuepress/dist --dest ./docs && npm run typedoc:publish",
    "docs:readme": "cpy 'README.md' docs",
    "postbuild:es": "babel es --out-dir es --no-babelrc --plugins annotate-pure-calls",
    "postversion": "git push --follow-tags",
    "prepublish": "npm run build",
    "prettify": "prettier --config ./.prettierrc --write ./{lib,es,src,test}/**/*.ts",
    "preversion": "npm run test",
    "publish:next": "npm version prerelease && npm publish --tag next",
    "start": "npm run build",
    "test": "npm run test:core && npm run test:packages",
    "test:ci": "npm run test:core && lerna bootstrap && npm run test:packages",
    "test:core": "npm run build:cjs && nyc mocha --require ts-node/register --require source-map-support/register --recursive test/**.ts test/**/*.test.ts",
    "test:only": "mocha --require ts-node/register",
    "test:packages": "mocha --require ts-node/register packages/**/test/*.test.ts && cd packages/xstate-react && npm test",
    "typedoc": "typedoc src/index.ts --excludePrivate --mode file --out ./api --target es6",
    "typedoc:publish": "npm run typedoc && gh-pages --dist ./api --dest ./api",
    "version": "npm run build"
  },
  "sideEffects": false,
  "types": "lib/index.d.ts",
  "version": "4.6.7"
}
