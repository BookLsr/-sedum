{
  "_args": [
    [
      {
        "raw": "fstream@^1.0.0",
        "scope": null,
        "escapedName": "fstream",
        "name": "fstream",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client/node_modules/node-gyp"
    ]
  ],
  "_cnpm_publish_time": 1557880698821,
  "_from": "fstream@^1.0.0",
  "_hasShrinkwrap": false,
  "_id": "fstream@1.0.12",
  "_location": "/fstream",
  "_nodeVersion": "12.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fstream_1.0.12_1557880698524_0.9741028075623028"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {
    "glob": "7.1.6"
  },
  "_requested": {
    "raw": "fstream@^1.0.0",
    "scope": null,
    "escapedName": "fstream",
    "name": "fstream",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/node-gyp",
    "/node-gyp/tar"
  ],
  "_resolved": "http://registry.npm.souche-inc.com/fstream/download/fstream-1.0.12.tgz",
  "_shasum": "4e8ba8ee2d48be4f7d0de505455548eae5932045",
  "_shrinkwrap": null,
  "_spec": "fstream@^1.0.0",
  "_where": "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client/node_modules/node-gyp",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/npm/fstream/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.1.2",
    "inherits": "~2.0.0",
    "mkdirp": ">=0.5 0",
    "rimraf": "2"
  },
  "description": "Advanced file system stream things",
  "devDependencies": {
    "standard": "^4.0.0",
    "tap": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "4e8ba8ee2d48be4f7d0de505455548eae5932045",
    "size": 17009,
    "noattachment": false,
    "tarball": "http://registry.npm.souche-inc.com/fstream/download/fstream-1.0.12.tgz"
  },
  "engines": {
    "node": ">=0.6"
  },
  "gitHead": "42354590e23bb514eb5c869eea64406be2947c6c",
  "homepage": "https://github.com/npm/fstream#readme",
  "license": "ISC",
  "main": "fstream.js",
  "maintainers": [
    {
      "name": "adam_baldwin",
      "email": "baldwin@andyet.net"
    },
    {
      "name": "ahmadnassri",
      "email": "ahmad@codeinchaos.com"
    },
    {
      "name": "annekimsey",
      "email": "anne@npmjs.com"
    },
    {
      "name": "billatnpm",
      "email": "billatnpm@gmail.com"
    },
    {
      "name": "claudiahdz",
      "email": "cghr1990@gmail.com"
    },
    {
      "name": "darcyclarke",
      "email": "darcy@darcyclarke.me"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    },
    {
      "name": "mikemimik",
      "email": "mike@mikecorp.ca"
    },
    {
      "name": "ruyadorno",
      "email": "contact@ruyadorno.com"
    }
  ],
  "name": "fstream",
  "optionalDependencies": {},
  "publish_time": 1557880698821,
  "readme": "Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/fstream.git"
  },
  "scripts": {
    "test": "standard && tap examples/*.js"
  },
  "version": "1.0.12"
}
