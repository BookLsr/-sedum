{
  "_args": [
    [
      {
        "raw": "potrace@^2.1.2",
        "scope": null,
        "escapedName": "potrace",
        "name": "potrace",
        "rawSpec": "^2.1.2",
        "spec": ">=2.1.2 <3.0.0",
        "type": "range"
      },
      "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client/node_modules/gatsby-plugin-sharp"
    ]
  ],
  "_cnpm_publish_time": 1560980168991,
  "_from": "potrace@^2.1.2",
  "_hasShrinkwrap": false,
  "_id": "potrace@2.1.2",
  "_location": "/potrace",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/potrace_2.1.2_1560980168839_0.9969065091964167"
  },
  "_npmUser": {
    "name": "iwasawafag",
    "email": "iwasawafag@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "potrace@^2.1.2",
    "scope": null,
    "escapedName": "potrace",
    "name": "potrace",
    "rawSpec": "^2.1.2",
    "spec": ">=2.1.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gatsby-plugin-sharp",
    "/gatsby-transformer-sharp"
  ],
  "_resolved": "http://registry.npm.souche-inc.com/potrace/download/potrace-2.1.2.tgz",
  "_shasum": "61473a326be1e734abac6d14d54e1880eed35471",
  "_shrinkwrap": null,
  "_spec": "potrace@^2.1.2",
  "_where": "/Users/windpursuer/IdeaProjects/tb/sedum/sedum-client/node_modules/gatsby-plugin-sharp",
  "author": {
    "name": "mattmc"
  },
  "bugs": {
    "url": "https://github.com/tooolbox/node-potrace/issues"
  },
  "dependencies": {
    "jimp": "^0.6.4"
  },
  "description": "Potrace in Javascript, for NodeJS",
  "devDependencies": {
    "lodash": "^4.15.0",
    "mocha": "^3.0.2",
    "should": "^11.1.0",
    "should-sinon": "0.0.5",
    "sinon": "^1.17.5"
  },
  "directories": {},
  "dist": {
    "shasum": "61473a326be1e734abac6d14d54e1880eed35471",
    "size": 44732,
    "noattachment": false,
    "tarball": "http://registry.npm.souche-inc.com/potrace/download/potrace-2.1.2.tgz"
  },
  "gitHead": "d39eee46c90baf92602b17a57e13a8ea43c9b593",
  "homepage": "https://github.com/tooolbox/node-potrace#readme",
  "keywords": [
    "potrace",
    "trace",
    "tracing",
    "svg",
    "bitmap",
    "posterization"
  ],
  "license": "GPL-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "iwasawafag",
      "email": "iwasawafag@gmail.com"
    },
    {
      "name": "mattmc",
      "email": "mmccullough@bridgepub.com"
    }
  ],
  "name": "potrace",
  "optionalDependencies": {},
  "publish_time": 1560980168991,
  "readme": "# node-potrace\r\nA NodeJS-compatible fork of [Potrace in JavaScript][potrace-by-kilobtye] with some additions, which is in turn a port of [the original Potrace][potrace] â€” a tool for tracing bitmaps.\r\n\r\n## Example and demo\r\n\r\n| **Original image**        | **Potrace output**           | **Posterized output**                   |\r\n|---------------------------|------------------------------|-----------------------------------------|\r\n| ![](test/sources/yao.jpg) | ![](https://cdn.rawgit.com/tooolbox/node-potrace/9ee822d/test/example-output.svg) | ![](https://cdn.rawgit.com/tooolbox/node-potrace/9ee822d/test/example-output-posterized.svg) |\r\n\r\n(Example image inherited from [online demo of the browser version][potrace-js-demo])\r\n\r\n## Usage\r\n\r\nInstall\r\n\r\n```sh\r\nnpm install potrace\r\n```\r\n\r\nBasic usage\r\n\r\n```js\r\nvar potrace = require('potrace'),\r\n    fs = require('fs');\r\n\r\npotrace.trace('./path/to/image.png', function(err, svg) {\r\n  if (err) throw err;\r\n  fs.writeFileSync('./output.svg', svg);\r\n});\r\n```\r\n\r\nYou can also provide a configuration object as a second argument.\r\n\r\n```js\r\nvar params = {\r\n  background: '#49ffd2',\r\n  color: 'blue',\r\n  threshold: 120\r\n};\r\n\r\npotrace.trace('./path/to/image.png', params, function(err, svg) {\r\n  /*...*/\r\n});\r\n```\r\n\r\nIf you want to run Potrace algorithm multiple times on the same image with different threshold setting and merge results together in a single file - `posterize` method does exactly that.\r\n\r\n```js\r\npotrace.posterize('./path/to/image.png', { threshold: 180, steps: 4 }, function(err, svg) {\r\n  /*...*/\r\n});\r\n\r\n// or if you know exactly where you want to break it on different levels\r\n\r\npotrace.posterize('./path/to/image.png', { steps: [40, 85, 135, 180] }, function(err, svg) {\r\n  /*...*/\r\n});\r\n```\r\n\r\n### Advanced usage and configuration\r\n\r\nBoth `trace` and `posterize` methods return instances of `Potrace` and `Posterizer` classes respectively to a callback function as third argument. \r\n\r\nYou can also instantiate these classes directly:\r\n\r\n```js\r\nvar potrace = require('potrace');\r\n\r\n// Tracing\r\n\r\nvar trace = new potrace.Potrace();\r\n\r\n// You can also pass configuration object to the constructor\r\ntrace.setParameters({\r\n  threshold: 128,\r\n  color: '#880000'\r\n});\r\n\r\ntrace.loadImage('path/to/image.png', function(err) {\r\n  if (err) throw err;\r\n\r\n  trace.getSVG(); // returns SVG document contents\r\n  trace.getPathTag(); // will return just <path> tag\r\n  trace.getSymbol('traced-image'); // will return <symbol> tag with given ID\r\n});\r\n\r\n// Posterization\r\n\r\nvar posterizer = new potrace.Posterize();\r\n\r\nposterizer.loadImage('path/to/image.png', function(err) {\r\n  if (err) throw err;\r\n  \r\n  posterizer.setParameter({\r\n    color: '#ccc',\r\n    background: '#222',\r\n    steps: 3,\r\n    threshold: 200,\r\n    fillStrategy: potrace.Posterize.FILL_MEAN\r\n  });\r\n  \r\n  posterizer.getSVG();\r\n  // or\r\n  posterizer.getSymbol('posterized-image');\r\n});\r\n```\r\n\r\nCallback function provided to `loadImage` methods will be executed in context of the `Potrace`/`Posterizer` instance, so if it doesn't go against your code style - you can just do\r\n\r\n```js\r\nnew potrace.Potrace()\r\n  .loadImage('path/to/image.bmp', function() {\r\n    if (err) throw err;\r\n    this.getSymbol('foo');\r\n  });\r\n```\r\n\r\n[Jimp module][jimp] is used on the back end, so first argument accepted by `loadImage` method could be anything Jimp can read: a `Buffer`, local path or a url string. Supported formats are: PNG, JPEG or BMP. It also could be a Jimp instance (provided bitmap is not modified)\r\n\r\n### Parameters\r\n\r\n`Potrace` class expects following parameters:\r\n\r\n- **turnPolicy** - how to resolve ambiguities in path decomposition. Possible values are exported as constants: `TURNPOLICY_BLACK`, `TURNPOLICY_WHITE`, `TURNPOLICY_LEFT`, `TURNPOLICY_RIGHT`, `TURNPOLICY_MINORITY`, `TURNPOLICY_MAJORITY`. Refer to [this document][potrace-algorithm] for more information (page 4)  \r\n  (default: `TURNPOLICY_MINORITY`)\r\n- **turdSize** - suppress speckles of up to this size   \r\n  (default: 2)\r\n- **alphaMax** - corner threshold parameter   \r\n  (default: 1)\r\n- **optCurve** - curve optimization   \r\n  (default: true)\r\n- **optTolerance** - curve optimization tolerance   \r\n  (default: 0.2)\r\n- **threshold** - threshold below which color is considered black.\r\n  Should be a number in range 0..255 or `THRESHOLD_AUTO` in which case threshold will be selected automatically using [Algorithm For Multilevel Thresholding][multilevel-thresholding]  \r\n  (default: `THRESHOLD_AUTO`)  \r\n- **blackOnWhite** - specifies colors by which side from threshold should be turned into vector shape  \r\n  (default: `true`)  \r\n- **color** - Fill color. Will be ignored when exporting as \\<symbol\\>. (default: `COLOR_AUTO`, which means black or white, depending on `blackOnWhite` property)\r\n- **background** - Background color. Will be ignored when exporting as \\<symbol\\>. By default is not present (`COLOR_TRANSPARENT`)\r\n\r\n---------------\r\n\r\n`Posterizer` class has same methods as `Potrace`, in exception of `.getPathTag()`. \r\nConfiguration object is extended with following properties:\r\n\r\n- **fillStrategy** - determines how fill color for each layer should be selected. Possible values are exported as constants:  \r\n    - `FILL_DOMINANT` - most frequent color in range (used by default), \r\n    - `FILL_MEAN` - arithmetic mean (average), \r\n    - `FILL_MEDIAN` - median color, \r\n    - `FILL_SPREAD` - ignores color information of the image and just spreads colors equally in range 0..\\<threshold\\> (or \\<threshold\\>..255 if `blackOnWhite` is set to `false`),\r\n- **rangeDistribution** - how color stops for each layer should be selected. Ignored if `steps` is an array. Possible values are:\r\n    - `RANGES_AUTO` - Performs automatic thresholding (using [Algorithm For Multilevel Thresholding][multilevel-thresholding]). Preferable method for already posterized sources, but takes long time to calculate 5 or more thresholds (exponential time complexity)  \r\n      *(used by default)*\r\n    - `RANGES_EQUAL` - Ignores color information of the image and breaks available color space into equal chunks\r\n- **steps** - Specifies desired number of layers in resulting image. If a number provided - thresholds for each layer will be automatically calculated according to `rangeDistribution` parameter. If an array provided it expected to be an array with precomputed thresholds for each layer (in range 0..255)  \r\n  (default: `STEPS_AUTO` which will result in `3` or `4`, depending on `threshold` value)\r\n- **threshold** - Breaks image into foreground and background (and only foreground being broken into desired number of layers). Basically when provided it becomes a threshold for last (least opaque) layer and then `steps - 1` intermediate thresholds calculated. If **steps** is an array of thresholds and every value from the array is lower (or larger if **blackOnWhite** parameter set to `false`) than threshold - threshold will be added to the array, otherwise just ignored.  \r\n  (default: `Potrace.THRESHOLD_AUTO`)\r\n- *all other parameters that Potrace class accepts*\r\n\r\n**Notes:**\r\n\r\n- When number of `steps` is greater than 10 - an extra layer could be added to ensure presence of darkest/brightest colors if needed to ensure presence of probably-important-at-this-point details like shadows or line art.\r\n- With big number of layers produced image will be looking brighter overall than original due to math error at the rendering phase because of how layers are composited.\r\n- With default configuration `steps`, `threshold` and `rangeDistribution` settings all set to auto, resulting in a 4 thresholds/color stops being calculated with Multilevel Thresholding algorithm mentioned above. Calculation of 4 thresholds takes 3-5 seconds on average laptop. You may want to explicitly limit number of `steps` to 3 to moderately improve processing speed.  \r\n\r\n## Thanks to\r\n\r\n- Peter Selinger for [original Potrace tool and algorithm][potrace]\r\n- @kilobtye for original [javascript port][potrace-by-kilobtye]\r\n\r\n## License\r\n\r\nThe GNU General Public License version 2 (GPLv2). Please see [License File](LICENSE) for more information.\r\n\r\n[potrace]: http://potrace.sourceforge.net/\r\n[potrace-algorithm]: http://potrace.sourceforge.net/potrace.pdf\r\n[multilevel-thresholding]: http://www.iis.sinica.edu.tw/page/jise/2001/200109_01.pdf\r\n[potrace-by-kilobtye]: https://github.com/kilobtye/potrace\r\n[potrace-js-demo]: http://kilobtye.github.io/potrace/\r\n[jimp]: https://github.com/oliver-moran/jimp",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tooolbox/node-potrace.git"
  },
  "scripts": {
    "test": "cd test && mocha test.js --reporter spec"
  },
  "version": "2.1.2"
}
